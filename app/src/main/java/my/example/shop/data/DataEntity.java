package my.example.shop.data;

import androidx.annotation.NonNull;

/***
 * Общая концепция работы с данными хранящимися в файлах.
 * Этот абстрактный класс позволит избавиться от кучи повторяющегося кода.
 * Обязательными полями класса являются:
 * указатель на файл хранения данных (позволяет использовать разные файлы для разных типов данных) и
 * идентификатор данных текущего экземпляра (необходим для точного оопределения нужных данных).
 */
abstract class DataEntity {

    /***
     * Указатель на привязанный файл данных.
     * Обязателен во всех экземплярах.
     */
    public DB db;


    /***
     * Идентификатор. Уникальный.
     * Обязателен во всех экземплярах.
     */
    public String id = "";


    /***
     * Нельзя создавать экземпляр класса без параметров.
     */
    private DataEntity() {}


    /***
     * Создаваемый экземляр должен сразу быть привязан к определённому файлу хранения данных.
     * Экземпляр изначально поинициализирован параметрами-пустышки.
     * Поэтому называется "Пустой".
     * @param db имя файла данных.
     */
    public DataEntity(DB db) {
        this.db = db;
    };


    /***
     * Сохранить данные в базу.
     */
    public void save() {
        FileDB.remove(db, id);
        FileDB.add(DB.PRODUCTS, toString());
    }


    /***
     * Удалить данные из базы.
     */
    public void remove() {
        FileDB.remove(db, id);
    }


    /***
     * Найти параметры в базе по идентификатору и использовать их.
     * @param id идентификатор данных
     */
    public void find(String id) {
        // используется не родной id, так как в "Пустом" экземпляре он равен ""
        String data = FileDB.find(db, id);
        if (!data.equals("")) {
            // если данные найдены, то используем их как параметры
            fromString(data);
        }
    }


    /***
     * Установить новый уникальный идентификатор данных.
     */
     public void setId() {
         id = FileDB.generateId(db);
     }


    /***
     * Установить параметры в соответствии с данными в строке.
     * Очерёдность парсинга соответствует очерёдности в матоде toString().
     * @param str строка параметров разделённых "|".
     */
    abstract public void fromString(String str);


    /***
     * Получить строку параметров разделённых "|".
     * Первым параметром необходимо указывать id.
     * @return строка удобная для хранения в файле.
     */
    @NonNull
    @Override
    abstract public String toString();
}
